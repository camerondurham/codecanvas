// Code generated by MockGen. DO NOT EDIT.
// Source: client/client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/runner-x/runner-x/server/api/v2"
)

// MockRequester is a mock of Requester interface.
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester.
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance.
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// Languages mocks base method.
func (m *MockRequester) Languages() (*v2.LanguagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Languages")
	ret0, _ := ret[0].(*v2.LanguagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Languages indicates an expected call of Languages.
func (mr *MockRequesterMockRecorder) Languages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Languages", reflect.TypeOf((*MockRequester)(nil).Languages))
}

// Run mocks base method.
func (m *MockRequester) Run(r *v2.RunRequest) (*v2.RunResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", r)
	ret0, _ := ret[0].(*v2.RunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockRequesterMockRecorder) Run(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRequester)(nil).Run), r)
}
