package iohelpers

import (
	"io"
	"strings"
	"testing"
)

func TestGetWriterChannelOutput(t *testing.T) {
	type args struct {
		pipeReadCloser io.ReadCloser
	}

	// create read closer
	readCloser10Chars := io.NopCloser(strings.NewReader("Contraband"))
	readCloser1000Chars := io.NopCloser(strings.NewReader("1123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890234567890"))
	readCloser5Chars := io.NopCloser(strings.NewReader("Contr"))

	tests := []struct {
		name     string
		args     args
		bufSize  int64
		wantSize int64
	}{
		{
			name:     "10 chars, 10 char limit",
			args:     args{readCloser10Chars},
			bufSize:  10,
			wantSize: 10,
		},
		{
			name:     "5 chars, 6 char limit",
			args:     args{readCloser5Chars},
			bufSize:  6,
			wantSize: 5,
		},
		{
			name:     "5 chars, 3 char limit",
			args:     args{readCloser5Chars},
			bufSize:  3,
			wantSize: 3,
		},
		{
			name:     "1000 chars, 10 char limit",
			args:     args{readCloser1000Chars},
			bufSize:  10,
			wantSize: 10,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := GetWriterChannelOutput(tt.args.pipeReadCloser, tt.bufSize)
			out := <-got
			if len(out) > int(tt.wantSize) {
				t.Errorf("GetWriterChannelOutput() out size = %d, want size = %d", len(out), tt.wantSize)
			}
		})
	}
}
