"use strict";(self.webpackChunkrunner_web_frontend=self.webpackChunkrunner_web_frontend||[]).push([[57,390,678,382],{3535:(n,e,t)=>{t.d(e,{A:()=>a});const o={local:{url:"http://localhost:10100/api/v1/",name:"Local Development",description:"Local development server"},staging:{url:"https://runner-staging.fly.dev/api/v1/",name:"Staging",description:"Pre-production testing environment"},production:{url:"https://runner.fly.dev/api/v1/",name:"Production",description:"Live production environment"}};let r="production";function i(){const n=document.getElementById("env-select");return n?n.value:"production"}function s(n){if(o[n]){r=n;const e=document.getElementById("env-select");e&&(e.value=n),l.url=o[n].url,l.environment=n;const t=new CustomEvent("environmentChanged",{detail:{environment:n,config:o[n]}});document.dispatchEvent(t)}}const l={getSelectedLanguage:function(){const n=document.getElementById("lang-select");return n.options[n.selectedIndex].innerText},get url(){return function(){const n=i();return o[n]||o.production}().url},runEndpoint:"run",langEndpoint:"languages",get environment(){return i()},setEnvironment:s,getSelectedEnvironment:i,initializeEnvironment:function(){s("production");const n=document.getElementById("env-select");n&&n.addEventListener("change",(function(){s(this.value)}))},environments:o},a=l},5444:(n,e,t)=>{t.d(e,{A:()=>r});var o=t(3535);const r=function(){return new Promise((function(n,e){let t=new XMLHttpRequest;const r=o.A.url+o.A.langEndpoint;t.open("GET",r),t.onload=function(){this.status>=200&&this.status<400?n(t.response):e({status:this.status,statusText:t.statusText})},t.onerror=function(){e({status:this.status,statusText:t.statusText})},t.send()}))}},2660:(n,e,t)=>{t(875),t(264),t(8267),t(576),t(6792),t(4806),t(3684),t(4550),t(8712),t(9770),t(3225),t(5493),t(3400),t(5135),t(8633),t(2320),t(6161),t(9265),t(5342),t(9902),t(4391),t(7446),t(2081),t(1138);var o=t(5072),r=t.n(o),i=t(7825),s=t.n(i),l=t(7659),a=t.n(l),c=t(5056),A=t.n(c),d=t(540),u=t.n(d),p=t(1113),m=t.n(p),f=t(1643),g={};g.styleTagTransform=m(),g.setAttributes=A(),g.insert=a().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=u(),r()(f.A,g),f.A&&f.A.locals&&f.A.locals;var h,C=t(9360),I=t(8964),b=t(5444),B=t(3535),y=t(9615);function x(){const n=B.A.getSelectedEnvironment(),e=B.A.environments[n];let t=document.getElementById("env-status");if(!t){t=document.createElement("div"),t.id="env-status",t.style.cssText="\n      margin: 10px 0;\n      padding: 5px 10px;\n      border-radius: 4px;\n      font-size: 12px;\n      font-weight: bold;\n      text-align: center;\n    ";const n=document.querySelector(".selectors");n.parentNode.insertBefore(t,n.nextSibling)}t.innerHTML=`\n    <strong>Environment:</strong> ${e.name}<br>\n    <small>${e.description}</small><br>\n    <small><strong>API:</strong> ${e.url}</small>\n  `,"local"===n?(t.style.backgroundColor="#e3f2fd",t.style.color="#1976d2",t.style.border="1px solid #bbdefb"):"staging"===n?(t.style.backgroundColor="#fff3e0",t.style.color="#f57c00",t.style.border="1px solid #ffcc02"):(t.style.backgroundColor="#e8f5e8",t.style.color="#2e7d32",t.style.border="1px solid #c8e6c9")}I.A.setValue("def fibonacci(n):\n\tif n<=1:\n\t\treturn n\n\telse:\n\t\treturn(fibonacci(n-1) + fibonacci(n-2))\n\nn = 5\n\nfibo_series = []\n\nfor i in range(0,n):\n\tfibo_series.append(fibonacci(i))\n\nprint('Hello, World from Python! Here\\'s some fibonacci numbers:')\nprint(fibo_series)"),(0,b.A)().then((function(n){var e=JSON.parse(n);h=e.languages})).catch((function(n){h=["Error!"],console.log("Error when fetching languages: "+n)})).finally((function(){var n=document.getElementById("lang-select");for(const t of h){var e=document.createElement("option");e.innerText=t,n.appendChild(e)}B.A.getSelectedLanguage()})),document.getElementById("submit-btn").addEventListener("click",C.A),document.getElementById("theme-select").addEventListener("change",(function(){const n=document.getElementById("theme-select");var e=n.options[n.selectedIndex].textContent;I.A.setOption("theme",e)})),document.getElementById("lang-select").addEventListener("change",y.A),B.A.initializeEnvironment(),document.addEventListener("environmentChanged",x),x()},9360:(n,e,t)=>{t.d(e,{A:()=>i});var o=t(8964),r=t(3535);t(875);const i=async function(){let n=document.getElementById("stdout-field"),e=document.getElementById("stderr-field"),t=document.getElementById("err-field");await new Promise((function(n,e){var t={source:o.A.getValue(),language:r.A.getSelectedLanguage()};let i=new XMLHttpRequest;const s=r.A.url+r.A.runEndpoint;i.open("POST",s),i.setRequestHeader("Content-Type","application/json"),i.onload=function(){this.status>=200&&this.status<400?n(i.response):e({status:this.status,statusText:i.statusText,body:i.response})},i.onerror=function(){e({status:this.status,statusText:i.statusText,body:i.response})},i.send(JSON.stringify(t))})).then((function(o){let r=JSON.parse(o);n.innerHTML="<pre>Stdout: "+r.stdout+"</pre>",n.removeAttribute("hidden"),e.innerHTML="<pre>Stderr: "+r.stderr+"</pre>",e.removeAttribute("hidden"),t.innerHTML="<pre>Error: "+r.error+"</pre>"})).catch((function(o){console.log(o),n.setAttribute("hidden",!0),e.setAttribute("hidden",!0),t.innerHTML="<pre>Error: "+function(n){const e="none";if(null===n)return e;let t="";const o=Object.keys(n);return o.forEach(((e,r)=>{null!==n[e]&&(t+=e+": "+String(n[e]),r<o.length-1&&(t+=", "))})),""==t&&(t=e),t}(o)+"</pre>"}))}},9615:(n,e,t)=>{t.d(e,{A:()=>r});var o=t(8964);const r=function(){const n=document.getElementById("lang-select"),e=n.options[n.selectedIndex].innerText;"python3"===e||"python"===e?(o.A.setOption("mode","python"),o.A.setValue("def fibonacci(n):\n\tif n<=1:\n\t\treturn n\n\telse:\n\t\treturn(fibonacci(n-1) + fibonacci(n-2))\n\nn = 5\n\nfibo_series = []\n\nfor i in range(0,n):\n\tfibo_series.append(fibonacci(i))\n\nprint('Hello, World from Python! Here\\'s some fibonacci numbers:')\nprint(fibo_series)")):"node"===e||"nodejs"===e||"js"===e||"javascript"===e?(o.A.setOption("mode","javascript"),o.A.setValue('const { exec } = require("child_process");\n\nconsole.log("Hello world from Node.js! My uptime is:");\n\nexec("uptime", (error, stdout, stderr) => {\n\tif (error) {\n\t\tconsole.log(`error: ${error.message}`);\n\t\treturn;\n}\n\tif (stderr) {\n\t\tconsole.log(`stderr: ${stderr}`);\n\t\treturn;\n\t}\n\t\tconsole.log(`stdout: ${stdout}`);\n});')):"c++"===e||"cpp"===e||"c++11"===e?(o.A.setOption("mode","clike"),o.A.setValue('#include<iostream>\n#include<thread>\nint main() {\n\tunsigned int nthreads = std::thread::hardware_concurrency();\n\tstd::cout << "hello world from C++!" << std::endl;\n\tstd::cerr << "I have " << nthreads << " threads!" << std::endl;\n\treturn 0;\n}')):"go"===e||"golang"===e?(o.A.setOption("mode","go"),o.A.setValue('package main\nimport "fmt"\nfunc main() {\n    fmt.Println("hello world from Go!")\n}')):"bash"===e||"sh"===e?(o.A.setOption("mode","shell"),o.A.setValue('\n# Function to print Fibonacci Sequence\nfunction print_fibonacci() {\n    num=$1\n    a=0\n    b=1\n    echo "The Fibonacci sequence for $num terms is: "\n\n    for (( i=0; i<num; i++ ))\n    do\n        echo -n "$a "\n        fn=$((a + b))\n        a=$b\n        b=$fn\n    done\n}\n\nprint_fibonacci 5\n\t\t\t')):"rust"===e?(o.A.setOption("mode","rust"),o.A.setValue('\nstruct MyStruct {\n\tmsg: String,\n}\n\nimpl MyStruct {\n\tfn new(msg: String) -> Self {\n\t\tSelf {\n\t\t\tmsg\n\t\t}\n\t}\n\t\n\tfn print(&self) {\n\t\tprintln!("{}", self.msg);\n\t}\n}\n\nfn main() {\n    let my_struct = MyStruct::new(String::from("Hello, World!"));\n\t\n\tmy_struct.print();\n}\n')):o.A.setValue("def fibonacci(n):\n\tif n<=1:\n\t\treturn n\n\telse:\n\t\treturn(fibonacci(n-1) + fibonacci(n-2))\n\nn = 5\n\nfibo_series = []\n\nfor i in range(0,n):\n\tfibo_series.append(fibonacci(i))\n\nprint('Hello, World from Python! Here\\'s some fibonacci numbers:')\nprint(fibo_series)")}},1643:(n,e,t)=>{t.d(e,{A:()=>l});var o=t(1354),r=t.n(o),i=t(6314),s=t.n(i)()(r());s.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400&display=swap);"]),s.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=IBM+Plex+Mono&display=swap);"]),s.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Work+Sans&display=swap);"]),s.push([n.id,'/* Dark mode */\n@media (prefers-color-scheme: dark) {\n    body {\n        background: #181818;\n        color: #d8d8d8;\n    }\n\n    a {\n        color: #CF9FFF;\n    }\n\n    .field {\n        background-color: #282828;\n        color: #d8d8d8;\n    }\n}\n\n\n\n/* Light mode */\n@media (prefers-color-scheme: light) {\n    body {\n        background-color: #f5f5f5;\n        color: #282828;\n    }\n\n    a {\n        color: #400080;\n    }\n\n    .field {\n        background-color: #d8d8d8;\n        color: #282828;\n    }\n}\n\n.CodeMirror {\n    margin: auto;\n    height: 450px;\n    font-size: 15px;\n    text-align: left;\n    text-shadow: none;\n}\n\nbutton {\n    font-style: "IBM Plex Mono", monospace;\n    padding: 4px;\n    margin-top: 5px;\n}\n\n.selectors {\n    display: flex;\n    justify-content: space-between;\n}\n\nselect {\n    font-family: monospace;\n    font: "IBM Plex Mono";\n}\n\n#wrapper {\n    margin-top: 3%;\n    width: 50%;\n}\n\n\nbody {\n    font-family: "IBM Plex Mono", monospace;\n    text-rendering: optimizeLegibility;\n    /* line-height: 1.5; */\n    /* margin: 1rem 1rem; */\n}\n\nhtml {\n    margin-left: calc(100vw - 100%);\n}\n\na:visited {\n    color: gray;\n    font-weight: bold;\n}\n\nfooter {\n    font-size: 14px;\n    padding: 20px;\n    margin-left: 30%;\n    align-items: center;\n}\n\n.output {\n    width: 70%;\n    margin-top: 10px;\n}\n\n.field {\n    border-radius: 10px;\n    -moz-border-radius: 10px;\n    margin: auto;\n    text-align: left;\n    padding: 5px;\n    font-size: 14px;\n}\n\n.box {\n    width: 90%;\n}\n\npre {\n    text-wrap: balance;\n}\n\n#wrapper {\n    width: 50%;\n    margin-left: 25%;\n}\n',"",{version:3,sources:["webpack://./style/main.css"],names:[],mappings:"AAKA,cAAc;AACd;IACI;QACI,mBAAmB;QACnB,cAAc;IAClB;;IAEA;QACI,cAAc;IAClB;;IAEA;QACI,yBAAyB;QACzB,cAAc;IAClB;AACJ;;;;AAIA,eAAe;AACf;IACI;QACI,yBAAyB;QACzB,cAAc;IAClB;;IAEA;QACI,cAAc;IAClB;;IAEA;QACI,yBAAyB;QACzB,cAAc;IAClB;AACJ;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,eAAe;IACf,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,sCAAsC;IACtC,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,cAAc;IACd,UAAU;AACd;;;AAGA;IACI,uCAAuC;IACvC,kCAAkC;IAClC,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,wBAAwB;IACxB,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,UAAU;IACV,gBAAgB;AACpB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400&display=swap");\n@import url(\'https://fonts.googleapis.com/css2?family=IBM+Plex+Mono&display=swap\');\n\n@import url("https://fonts.googleapis.com/css2?family=Work+Sans&display=swap");\n\n/* Dark mode */\n@media (prefers-color-scheme: dark) {\n    body {\n        background: #181818;\n        color: #d8d8d8;\n    }\n\n    a {\n        color: #CF9FFF;\n    }\n\n    .field {\n        background-color: #282828;\n        color: #d8d8d8;\n    }\n}\n\n\n\n/* Light mode */\n@media (prefers-color-scheme: light) {\n    body {\n        background-color: #f5f5f5;\n        color: #282828;\n    }\n\n    a {\n        color: #400080;\n    }\n\n    .field {\n        background-color: #d8d8d8;\n        color: #282828;\n    }\n}\n\n.CodeMirror {\n    margin: auto;\n    height: 450px;\n    font-size: 15px;\n    text-align: left;\n    text-shadow: none;\n}\n\nbutton {\n    font-style: "IBM Plex Mono", monospace;\n    padding: 4px;\n    margin-top: 5px;\n}\n\n.selectors {\n    display: flex;\n    justify-content: space-between;\n}\n\nselect {\n    font-family: monospace;\n    font: "IBM Plex Mono";\n}\n\n#wrapper {\n    margin-top: 3%;\n    width: 50%;\n}\n\n\nbody {\n    font-family: "IBM Plex Mono", monospace;\n    text-rendering: optimizeLegibility;\n    /* line-height: 1.5; */\n    /* margin: 1rem 1rem; */\n}\n\nhtml {\n    margin-left: calc(100vw - 100%);\n}\n\na:visited {\n    color: gray;\n    font-weight: bold;\n}\n\nfooter {\n    font-size: 14px;\n    padding: 20px;\n    margin-left: 30%;\n    align-items: center;\n}\n\n.output {\n    width: 70%;\n    margin-top: 10px;\n}\n\n.field {\n    border-radius: 10px;\n    -moz-border-radius: 10px;\n    margin: auto;\n    text-align: left;\n    padding: 5px;\n    font-size: 14px;\n}\n\n.box {\n    width: 90%;\n}\n\npre {\n    text-wrap: balance;\n}\n\n#wrapper {\n    width: 50%;\n    margin-left: 25%;\n}\n'],sourceRoot:""}]);const l=s}},n=>{n.O(0,[875,417,237],(()=>n(n.s=2660))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,