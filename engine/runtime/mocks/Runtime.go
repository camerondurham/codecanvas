// Code generated by MockGen. DO NOT EDIT.
// Source: ./engine/runtime/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "github.com/runner-x/runner-x/engine/runtime"
)

// MockRuntime is a mock of Runtime interface.
type MockRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMockRecorder
}

// MockRuntimeMockRecorder is the mock recorder for MockRuntime.
type MockRuntimeMockRecorder struct {
	mock *MockRuntime
}

// NewMockRuntime creates a new mock instance.
func NewMockRuntime(ctrl *gomock.Controller) *MockRuntime {
	mock := &MockRuntime{ctrl: ctrl}
	mock.recorder = &MockRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntime) EXPECT() *MockRuntimeMockRecorder {
	return m.recorder
}

// IsReady mocks base method.
func (m *MockRuntime) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockRuntimeMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockRuntime)(nil).IsReady))
}

// RunCmd mocks base method.
func (m *MockRuntime) RunCmd(runprops *runtime.RunProps) (*runtime.RunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCmd", runprops)
	ret0, _ := ret[0].(*runtime.RunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCmd indicates an expected call of RunCmd.
func (mr *MockRuntimeMockRecorder) RunCmd(runprops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCmd", reflect.TypeOf((*MockRuntime)(nil).RunCmd), runprops)
}

// RuntimeGid mocks base method.
func (m *MockRuntime) RuntimeGid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeGid")
	ret0, _ := ret[0].(int)
	return ret0
}

// RuntimeGid indicates an expected call of RuntimeGid.
func (mr *MockRuntimeMockRecorder) RuntimeGid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeGid", reflect.TypeOf((*MockRuntime)(nil).RuntimeGid))
}

// RuntimeUid mocks base method.
func (m *MockRuntime) RuntimeUid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeUid")
	ret0, _ := ret[0].(int)
	return ret0
}

// RuntimeUid indicates an expected call of RuntimeUid.
func (mr *MockRuntimeMockRecorder) RuntimeUid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeUid", reflect.TypeOf((*MockRuntime)(nil).RuntimeUid))
}

// SafeRunCmd mocks base method.
func (m *MockRuntime) SafeRunCmd(props *runtime.RunProps) (*runtime.RunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeRunCmd", props)
	ret0, _ := ret[0].(*runtime.RunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeRunCmd indicates an expected call of SafeRunCmd.
func (mr *MockRuntimeMockRecorder) SafeRunCmd(props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeRunCmd", reflect.TypeOf((*MockRuntime)(nil).SafeRunCmd), props)
}

// Workdir mocks base method.
func (m *MockRuntime) Workdir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workdir")
	ret0, _ := ret[0].(string)
	return ret0
}

// Workdir indicates an expected call of Workdir.
func (mr *MockRuntimeMockRecorder) Workdir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workdir", reflect.TypeOf((*MockRuntime)(nil).Workdir))
}
