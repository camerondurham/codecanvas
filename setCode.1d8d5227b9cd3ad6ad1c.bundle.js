"use strict";(self.webpackChunkrunner_web_frontend=self.webpackChunkrunner_web_frontend||[]).push([[678],{9615:(n,t,e)=>{e.d(t,{A:()=>o});var r=e(8964);const o=function(){const n=document.getElementById("lang-select"),t=n.options[n.selectedIndex].innerText;"python3"===t||"python"===t?(r.A.setOption("mode","python"),r.A.setValue("def fibonacci(n):\n\tif n<=1:\n\t\treturn n\n\telse:\n\t\treturn(fibonacci(n-1) + fibonacci(n-2))\n\nn = 5\n\nfibo_series = []\n\nfor i in range(0,n):\n\tfibo_series.append(fibonacci(i))\n\nprint('Hello, World from Python! Here\\'s some fibonacci numbers:')\nprint(fibo_series)")):"node"===t||"nodejs"===t||"js"===t||"javascript"===t?(r.A.setOption("mode","javascript"),r.A.setValue('const { exec } = require("child_process");\n\nconsole.log("Hello world from Node.js! My uptime is:");\n\nexec("uptime", (error, stdout, stderr) => {\n\tif (error) {\n\t\tconsole.log(`error: ${error.message}`);\n\t\treturn;\n}\n\tif (stderr) {\n\t\tconsole.log(`stderr: ${stderr}`);\n\t\treturn;\n\t}\n\t\tconsole.log(`stdout: ${stdout}`);\n});')):"c++"===t||"cpp"===t||"c++11"===t?(r.A.setOption("mode","clike"),r.A.setValue('#include<iostream>\n#include<thread>\nint main() {\n\tunsigned int nthreads = std::thread::hardware_concurrency();\n\tstd::cout << "hello world from C++!" << std::endl;\n\tstd::cerr << "I have " << nthreads << " threads!" << std::endl;\n\treturn 0;\n}')):"go"===t||"golang"===t?(r.A.setOption("mode","go"),r.A.setValue('package main\nimport "fmt"\nfunc main() {\n    fmt.Println("hello world from Go!")\n}')):"bash"===t||"sh"===t?(r.A.setOption("mode","shell"),r.A.setValue('\n# Function to print Fibonacci Sequence\nfunction print_fibonacci() {\n    num=$1\n    a=0\n    b=1\n    echo "The Fibonacci sequence for $num terms is: "\n\n    for (( i=0; i<num; i++ ))\n    do\n        echo -n "$a "\n        fn=$((a + b))\n        a=$b\n        b=$fn\n    done\n}\n\nprint_fibonacci 5\n\t\t\t')):"rust"===t?(r.A.setOption("mode","rust"),r.A.setValue('\nstruct MyStruct {\n\tmsg: String,\n}\n\nimpl MyStruct {\n\tfn new(msg: String) -> Self {\n\t\tSelf {\n\t\t\tmsg\n\t\t}\n\t}\n\t\n\tfn print(&self) {\n\t\tprintln!("{}", self.msg);\n\t}\n}\n\nfn main() {\n    let my_struct = MyStruct::new(String::from("Hello, World!"));\n\t\n\tmy_struct.print();\n}\n')):r.A.setValue("def fibonacci(n):\n\tif n<=1:\n\t\treturn n\n\telse:\n\t\treturn(fibonacci(n-1) + fibonacci(n-2))\n\nn = 5\n\nfibo_series = []\n\nfor i in range(0,n):\n\tfibo_series.append(fibonacci(i))\n\nprint('Hello, World from Python! Here\\'s some fibonacci numbers:')\nprint(fibo_series)")}}},n=>{n.O(0,[237],(()=>n(n.s=9615))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0Q29kZS44ZTcxNDEyYTg1ODRiNjJlMzk5Ny5idW5kbGUuanMiLCJtYXBwaW5ncyI6IndKQStGQSxRQTdGQSxXQUNFLE1BQU1BLEVBQVdDLFNBQVNDLGVBQWUsZUFDbkNDLEVBQU9ILEVBQVNJLFFBQVFKLEVBQVNLLGVBQWVDLFVBQ3pDLFlBQVRILEdBQStCLFdBQVRBLEdBQ3hCLElBQVdJLFVBQVUsT0FBUSxVQUM3QixJQUFXQyxTQUNULDBSQUdPLFNBQVRMLEdBQ1MsV0FBVEEsR0FDUyxPQUFUQSxHQUNTLGVBQVRBLEdBRUEsSUFBV0ksVUFBVSxPQUFRLGNBQzdCLElBQVdDLFNBQVMsNFZBQ0YsUUFBVEwsR0FBMkIsUUFBVEEsR0FBMkIsVUFBVEEsR0FDN0MsSUFBV0ksVUFBVSxPQUFRLFNBQzdCLElBQVdDLFNBQ1QsZ1FBU2dCLE9BQVRMLEdBQTBCLFdBQVRBLEdBQzFCLElBQVdJLFVBQVUsT0FBUSxNQUM3QixJQUFXQyxTQUNULDBGQU1nQixTQUFUTCxHQUE0QixPQUFUQSxHQUM1QixJQUFXSSxVQUFVLE9BQVEsU0FDN0IsSUFBV0MsU0FDVCw4VEFvQmdCLFNBQVRMLEdBQ1QsSUFBV0ksVUFBVSxPQUFRLFFBQzdCLElBQVdDLFNBQVMsbVRBeUJwQixJQUFXQSxTQUNULHdSQUdOLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ydW5uZXItd2ViLWZyb250ZW5kLy4vanMvc2V0LWNvZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvZGVNaXJyb3IgZnJvbSBcIi4vZWRpdG9yXCI7XG5cbmZ1bmN0aW9uIHNldExhbmcoKSB7XG4gIGNvbnN0IHNlbGVjdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYW5nLXNlbGVjdFwiKTtcbiAgY29uc3QgbGFuZyA9IHNlbGVjdG9yLm9wdGlvbnNbc2VsZWN0b3Iuc2VsZWN0ZWRJbmRleF0uaW5uZXJUZXh0O1xuICBpZiAobGFuZyA9PT0gXCJweXRob24zXCIgfHwgbGFuZyA9PT0gXCJweXRob25cIikge1xuICAgIGNvZGVNaXJyb3Iuc2V0T3B0aW9uKFwibW9kZVwiLCBcInB5dGhvblwiKVxuICAgIGNvZGVNaXJyb3Iuc2V0VmFsdWUoXG4gICAgICBcImRlZiBmaWJvbmFjY2kobik6XFxuXFx0aWYgbjw9MTpcXG5cXHRcXHRyZXR1cm4gblxcblxcdGVsc2U6XFxuXFx0XFx0cmV0dXJuKGZpYm9uYWNjaShuLTEpICsgZmlib25hY2NpKG4tMikpXFxuXFxubiA9IDVcXG5cXG5maWJvX3NlcmllcyA9IFtdXFxuXFxuZm9yIGkgaW4gcmFuZ2UoMCxuKTpcXG5cXHRmaWJvX3Nlcmllcy5hcHBlbmQoZmlib25hY2NpKGkpKVxcblxcbnByaW50KCdIZWxsbywgV29ybGQgZnJvbSBQeXRob24hIEhlcmVcXFxcJ3Mgc29tZSBmaWJvbmFjY2kgbnVtYmVyczonKVxcbnByaW50KGZpYm9fc2VyaWVzKVwiXG4gICAgKTtcbiAgfSBlbHNlIGlmIChcbiAgICBsYW5nID09PSBcIm5vZGVcIiB8fFxuICAgIGxhbmcgPT09IFwibm9kZWpzXCIgfHxcbiAgICBsYW5nID09PSBcImpzXCIgfHxcbiAgICBsYW5nID09PSBcImphdmFzY3JpcHRcIlxuICApIHtcbiAgICBjb2RlTWlycm9yLnNldE9wdGlvbihcIm1vZGVcIiwgXCJqYXZhc2NyaXB0XCIpO1xuICAgIGNvZGVNaXJyb3Iuc2V0VmFsdWUoJ2NvbnN0IHsgZXhlYyB9ID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XFxuXFxuY29uc29sZS5sb2coXCJIZWxsbyB3b3JsZCBmcm9tIE5vZGUuanMhIE15IHVwdGltZSBpczpcIik7XFxuXFxuZXhlYyhcInVwdGltZVwiLCAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSA9PiB7XFxuXFx0aWYgKGVycm9yKSB7XFxuXFx0XFx0Y29uc29sZS5sb2coYGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XFxuXFx0XFx0cmV0dXJuO1xcbn1cXG5cXHRpZiAoc3RkZXJyKSB7XFxuXFx0XFx0Y29uc29sZS5sb2coYHN0ZGVycjogJHtzdGRlcnJ9YCk7XFxuXFx0XFx0cmV0dXJuO1xcblxcdH1cXG5cXHRcXHRjb25zb2xlLmxvZyhgc3Rkb3V0OiAke3N0ZG91dH1gKTtcXG59KTsnKTtcbiAgfSBlbHNlIGlmIChsYW5nID09PSBcImMrK1wiIHx8IGxhbmcgPT09IFwiY3BwXCIgfHwgbGFuZyA9PT0gXCJjKysxMVwiKSB7XG4gICAgY29kZU1pcnJvci5zZXRPcHRpb24oXCJtb2RlXCIsIFwiY2xpa2VcIik7XG4gICAgY29kZU1pcnJvci5zZXRWYWx1ZShcbiAgICAgIGAjaW5jbHVkZTxpb3N0cmVhbT5cbiNpbmNsdWRlPHRocmVhZD5cbmludCBtYWluKCkge1xuXHR1bnNpZ25lZCBpbnQgbnRocmVhZHMgPSBzdGQ6OnRocmVhZDo6aGFyZHdhcmVfY29uY3VycmVuY3koKTtcblx0c3RkOjpjb3V0IDw8IFwiaGVsbG8gd29ybGQgZnJvbSBDKyshXCIgPDwgc3RkOjplbmRsO1xuXHRzdGQ6OmNlcnIgPDwgXCJJIGhhdmUgXCIgPDwgbnRocmVhZHMgPDwgXCIgdGhyZWFkcyFcIiA8PCBzdGQ6OmVuZGw7XG5cdHJldHVybiAwO1xufWBcbiAgICApO1xuICB9IGVsc2UgaWYgKGxhbmcgPT09IFwiZ29cIiB8fCBsYW5nID09PSBcImdvbGFuZ1wiKSB7XG4gICAgY29kZU1pcnJvci5zZXRPcHRpb24oXCJtb2RlXCIsIFwiZ29cIik7XG4gICAgY29kZU1pcnJvci5zZXRWYWx1ZShcbiAgICAgIGBwYWNrYWdlIG1haW5cbmltcG9ydCBcImZtdFwiXG5mdW5jIG1haW4oKSB7XG4gICAgZm10LlByaW50bG4oXCJoZWxsbyB3b3JsZCBmcm9tIEdvIVwiKVxufWBcbiAgICApO1xuICB9IGVsc2UgaWYgKGxhbmcgPT09IFwiYmFzaFwiIHx8IGxhbmcgPT09IFwic2hcIikge1xuICAgIGNvZGVNaXJyb3Iuc2V0T3B0aW9uKFwibW9kZVwiLCBcInNoZWxsXCIpXG4gICAgY29kZU1pcnJvci5zZXRWYWx1ZShcbiAgICAgIGBcbiMgRnVuY3Rpb24gdG8gcHJpbnQgRmlib25hY2NpIFNlcXVlbmNlXG5mdW5jdGlvbiBwcmludF9maWJvbmFjY2koKSB7XG4gICAgbnVtPSQxXG4gICAgYT0wXG4gICAgYj0xXG4gICAgZWNobyBcIlRoZSBGaWJvbmFjY2kgc2VxdWVuY2UgZm9yICRudW0gdGVybXMgaXM6IFwiXG5cbiAgICBmb3IgKCggaT0wOyBpPG51bTsgaSsrICkpXG4gICAgZG9cbiAgICAgICAgZWNobyAtbiBcIiRhIFwiXG4gICAgICAgIGZuPSQoKGEgKyBiKSlcbiAgICAgICAgYT0kYlxuICAgICAgICBiPSRmblxuICAgIGRvbmVcbn1cblxucHJpbnRfZmlib25hY2NpIDVcblx0XHRcdGBcbiAgICApO1xuICB9IGVsc2UgaWYgKGxhbmcgPT09IFwicnVzdFwiKSB7XG4gICAgY29kZU1pcnJvci5zZXRPcHRpb24oXCJtb2RlXCIsIFwicnVzdFwiKTtcbiAgICBjb2RlTWlycm9yLnNldFZhbHVlKGBcbnN0cnVjdCBNeVN0cnVjdCB7XG5cdG1zZzogU3RyaW5nLFxufVxuXG5pbXBsIE15U3RydWN0IHtcblx0Zm4gbmV3KG1zZzogU3RyaW5nKSAtPiBTZWxmIHtcblx0XHRTZWxmIHtcblx0XHRcdG1zZ1xuXHRcdH1cblx0fVxuXHRcblx0Zm4gcHJpbnQoJnNlbGYpIHtcblx0XHRwcmludGxuIShcInt9XCIsIHNlbGYubXNnKTtcblx0fVxufVxuXG5mbiBtYWluKCkge1xuICAgIGxldCBteV9zdHJ1Y3QgPSBNeVN0cnVjdDo6bmV3KFN0cmluZzo6ZnJvbShcIkhlbGxvLCBXb3JsZCFcIikpO1xuXHRcblx0bXlfc3RydWN0LnByaW50KCk7XG59XG5gXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb2RlTWlycm9yLnNldFZhbHVlKFxuICAgICAgXCJkZWYgZmlib25hY2NpKG4pOlxcblxcdGlmIG48PTE6XFxuXFx0XFx0cmV0dXJuIG5cXG5cXHRlbHNlOlxcblxcdFxcdHJldHVybihmaWJvbmFjY2kobi0xKSArIGZpYm9uYWNjaShuLTIpKVxcblxcbm4gPSA1XFxuXFxuZmlib19zZXJpZXMgPSBbXVxcblxcbmZvciBpIGluIHJhbmdlKDAsbik6XFxuXFx0Zmlib19zZXJpZXMuYXBwZW5kKGZpYm9uYWNjaShpKSlcXG5cXG5wcmludCgnSGVsbG8sIFdvcmxkIGZyb20gUHl0aG9uISBIZXJlXFxcXCdzIHNvbWUgZmlib25hY2NpIG51bWJlcnM6JylcXG5wcmludChmaWJvX3NlcmllcylcIlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0TGFuZztcbiJdLCJuYW1lcyI6WyJzZWxlY3RvciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJsYW5nIiwib3B0aW9ucyIsInNlbGVjdGVkSW5kZXgiLCJpbm5lclRleHQiLCJzZXRPcHRpb24iLCJzZXRWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=