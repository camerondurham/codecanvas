"use strict";(self.webpackChunkrunner_web_frontend=self.webpackChunkrunner_web_frontend||[]).push([[390],{3535:(n,t,e)=>{e.d(t,{A:()=>c});const o={local:{url:"http://localhost:10100/api/v1/",name:"Local Development",description:"Local development server"},staging:{url:"https://runner-staging.fly.dev/api/v1/",name:"Staging",description:"Pre-production testing environment"},production:{url:"https://runner.fly.dev/api/v1/",name:"Production",description:"Live production environment"}};let s="production";function i(){const n=document.getElementById("env-select");return n?n.value:"staging"}function r(n){if(o[n]){s=n;const t=document.getElementById("env-select");t&&(t.value=n),u.url=o[n].url,u.environment=n;const e=new CustomEvent("environmentChanged",{detail:{environment:n,config:o[n]}});document.dispatchEvent(e)}}const u={getSelectedLanguage:function(){const n=document.getElementById("lang-select");return n.options[n.selectedIndex].innerText},get url(){return function(){const n=i();return o[n]||o.production}().url},runEndpoint:"run",langEndpoint:"languages",get environment(){return i()},setEnvironment:r,getSelectedEnvironment:i,initializeEnvironment:function(){r("staging");const n=document.getElementById("env-select");n&&n.addEventListener("change",(function(){r(this.value)}))},environments:o},c=u},5444:(n,t,e)=>{e.d(t,{A:()=>s});var o=e(3535);const s=function(){return new Promise((function(n,t){let e=new XMLHttpRequest;const s=o.A.url+o.A.langEndpoint;e.open("GET",s),e.onload=function(){this.status>=200&&this.status<400?n(e.response):t({status:this.status,statusText:e.statusText})},e.onerror=function(){t({status:this.status,statusText:e.statusText})},e.send()}))}}},n=>{n.O(0,[237],(()=>n(n.s=5444))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,