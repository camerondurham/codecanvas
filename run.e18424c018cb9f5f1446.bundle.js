"use strict";(self.webpackChunkrunner_web_frontend=self.webpackChunkrunner_web_frontend||[]).push([[382],{3535:(e,t,n)=>{n.d(t,{A:()=>s});const r={local:{url:"http://localhost:10100/api/v1/"},staging:{url:"https://runner-staging.fly.dev/api/v1/"},production:{url:"https://runner.fly.dev/api/v1/"}},s={getSelectedLanguage:function(){const e=document.getElementById("lang-select");return e.options[e.selectedIndex].innerText},url:(r.production||r.production).url,runEndpoint:"run",langEndpoint:"languages",environment:"production"}},9360:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(8964),s=n(3535);n(875);const o=async function(){let e=document.getElementById("stdout-field"),t=document.getElementById("stderr-field"),n=document.getElementById("err-field");await new Promise((function(e,t){var n={source:r.A.getValue(),language:s.A.getSelectedLanguage()};let o=new XMLHttpRequest;const u=s.A.url+s.A.runEndpoint;o.open("POST",u),o.setRequestHeader("Content-Type","application/json"),o.onload=function(){this.status>=200&&this.status<400?e(o.response):t({status:this.status,statusText:o.statusText,body:o.response})},o.onerror=function(){t({status:this.status,statusText:o.statusText,body:o.response})},o.send(JSON.stringify(n))})).then((function(r){let s=JSON.parse(r);e.innerHTML="<pre>Stdout: "+s.stdout+"</pre>",e.removeAttribute("hidden"),t.innerHTML="<pre>Stderr: "+s.stderr+"</pre>",t.removeAttribute("hidden"),n.innerHTML="<pre>Error: "+s.error+"</pre>"})).catch((function(r){console.log(r),e.setAttribute("hidden",!0),t.setAttribute("hidden",!0),n.innerHTML="<pre>Error: "+function(e){const t="none";if(null===e)return t;let n="";const r=Object.keys(e);return r.forEach(((t,s)=>{null!==e[t]&&(n+=t+": "+String(e[t]),s<r.length-1&&(n+=", "))})),""==n&&(n=t),n}(r)+"</pre>"}))}}},e=>{e.O(0,[875,237],(()=>e(e.s=9360))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,