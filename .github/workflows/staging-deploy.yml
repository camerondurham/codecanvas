name: Staging Deploy
on:
  push:
    branches:
      - staging
    paths:
      - '.github/workflows/**'
      - 'docker/**'
      - 'engine/**'
      - 'server/**'
      - 'util/**'
      - 'web-frontend/**'
      - 'fly.staging.toml'

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  STAGING_API_URL: https://runner-staging.fly.dev/api/v1/

jobs:
  deploy-backend:
    name: Deploy backend to staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy to staging
        run: flyctl deploy --remote-only --config fly.staging.toml --dockerfile docker/server-debian/Dockerfile

  deploy-frontend:
    name: Deploy frontend (supports all environments)
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web-frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        working-directory: web-frontend
      
      - name: Build frontend with environment selector
        run: npm run build
        working-directory: web-frontend
        env:
          NODE_ENV: production
      
      - name: Verify frontend build
        run: |
          echo "Verifying frontend build..."
          echo "Built files:"
          ls -la web-frontend/dist/
          echo "Frontend includes environment selector for local, staging, and production"
          echo "Users can switch between environments dynamically from the UI"
      
      - name: Deploy frontend
        run: |
          echo "Frontend built with dynamic environment selection"
          echo "Users can select from:"
          echo "- Local: http://localhost:10100/api/v1/"
          echo "- Staging: https://runner-staging.fly.dev/api/v1/"
          echo "- Production: https://runner.fly.dev/api/v1/"
          echo "Built files ready for deployment"
          
          # Deploy to your preferred frontend hosting
          # npm run deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-deployment:
    name: Notify staging deployment completion
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Deployment status
        run: |
          echo "Staging deployment completed!"
          echo "Backend URL: https://runner-staging.fly.dev"
          echo "Frontend: Built with staging configuration"
          echo "API Endpoint: ${{ env.STAGING_API_URL }}"
          
          if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "✅ Both backend and frontend deployed successfully to staging"
          else
            echo "❌ Staging deployment had issues:"
            echo "Backend: ${{ needs.deploy-backend.result }}"
            echo "Frontend: ${{ needs.deploy-frontend.result }}"
          fi