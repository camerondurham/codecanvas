"use strict";(self.webpackChunkrunner_web_frontend=self.webpackChunkrunner_web_frontend||[]).push([[554],{5106:(t,e,n)=>{n.d(e,{Z:()=>s});const s={getSelectedLanguage:function(){const t=document.getElementById("lang-select");return t.options[t.selectedIndex].innerText},url:"https://runner.fly.dev/api/v1/",runEndpoint:"run",langEndpoint:"languages"}},7557:(t,e,n)=>{n.d(e,{Z:()=>u});var s=n(6862),r=n(5106);n(1380);const u=async function(){await new Promise((function(t,e){var n={source:s.Z.getValue(),language:r.Z.getSelectedLanguage()};let u=new XMLHttpRequest;const o=r.Z.url+r.Z.runEndpoint;u.open("POST",o),u.setRequestHeader("Content-Type","application/json"),u.onload=function(){this.status>=200&&this.status<400?t(u.response):e({status:this.status,statusText:u.statusText})},u.onerror=function(){e({status:this.status,statusText:u.statusText})},u.send(JSON.stringify(n))})).then((function(t){let e=JSON.parse(t);document.getElementById("stdout-field").innerHTML="Stdout: "+e.stdout.replace(/\n/g,"<br>"),document.getElementById("stderr-field").innerHTML="Stderr: "+e.stderr,document.getElementById("err-field").innerHTML="Error: "+e.error})).catch((function(t){console.log(t),document.getElementById("output-field").textContent="Error: "+t}))}}},t=>{t.O(0,[380,631],(()=>(7557,t(t.s=7557)))),t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLjYyZTJlNjdlMzgwODgxNWJlNWYzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiMElBS0EsTUFTQSxFQVRxQixDQUNuQkEsb0JBTkYsV0FDRSxNQUFNQyxFQUFXQyxTQUFTQyxlQUFlLGVBQ3pDLE9BQU9GLEVBQVNHLFFBQVFILEVBQVNJLGVBQWVDLFdBS2hEQyxJQUFLLGlDQUNMQyxZQUFhLE1BQ2JDLGFBQWMsYyxnRUN5Q2hCLFFBaEJBQyx1QkE3QlMsSUFBSUMsU0FBUSxTQUFVQyxFQUFTQyxHQUNwQyxJQUFJQyxFQUFNLENBQ1JDLE9BQVEsZUFDUkMsU0FBVSwyQkFFWixJQUFJQyxFQUFNLElBQUlDLGVBQ2QsTUFBTUMsRUFBVSxRQUFtQixnQkFDbkNGLEVBQUlHLEtBQUssT0FBUUQsR0FDakJGLEVBQUlJLGlCQUFpQixlQUFnQixvQkFDckNKLEVBQUlLLE9BQVMsV0FDUEMsS0FBS0MsUUFBVSxLQUFPRCxLQUFLQyxPQUFTLElBQ3RDWixFQUFRSyxFQUFJUSxVQUVaWixFQUFPLENBQ0xXLE9BQVFELEtBQUtDLE9BQ2JFLFdBQVlULEVBQUlTLGNBSXRCVCxFQUFJVSxRQUFVLFdBQ1pkLEVBQU8sQ0FDTFcsT0FBUUQsS0FBS0MsT0FDYkUsV0FBWVQsRUFBSVMsY0FHcEJULEVBQUlXLEtBQUtDLEtBQUtDLFVBQVVoQixPQU12QmlCLE1BQUssU0FBVUMsR0FDZCxJQUFJQyxFQUFNSixLQUFLSyxNQUFNRixHQUNyQjlCLFNBQVNDLGVBQWUsZ0JBQWdCZ0MsVUFDdEMsV0FBYUYsRUFBWSxPQUFFRyxRQUFRLE1BQU8sUUFDNUNsQyxTQUFTQyxlQUFlLGdCQUFnQmdDLFVBQ3RDLFdBQWFGLEVBQVksT0FDM0IvQixTQUFTQyxlQUFlLGFBQWFnQyxVQUFZLFVBQVlGLEVBQVcsU0FFekVJLE9BQU0sU0FBVUMsR0FDZkMsUUFBUUMsSUFBSUYsR0FDWnBDLFNBQVNDLGVBQWUsZ0JBQWdCc0MsWUFBYyxVQUFZSCxRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnVubmVyLXdlYi1mcm9udGVuZC8uL2pzL2NvbmZpZy11dGlscy5qcyIsIndlYnBhY2s6Ly9ydW5uZXItd2ViLWZyb250ZW5kLy4vanMvcnVuLXJlcXVlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0U2VsZWN0ZWRMYW5ndWFnZSgpIHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhbmctc2VsZWN0XCIpO1xuICByZXR1cm4gc2VsZWN0b3Iub3B0aW9uc1tzZWxlY3Rvci5zZWxlY3RlZEluZGV4XS5pbm5lclRleHQ7XG59XG5cbmNvbnN0IHJ1bm5lckNvbmZpZyA9IHtcbiAgZ2V0U2VsZWN0ZWRMYW5ndWFnZTogZ2V0U2VsZWN0ZWRMYW5ndWFnZSxcbiAgdXJsOiBcImh0dHBzOi8vcnVubmVyLmZseS5kZXYvYXBpL3YxL1wiLFxuICBydW5FbmRwb2ludDogXCJydW5cIixcbiAgbGFuZ0VuZHBvaW50OiBcImxhbmd1YWdlc1wiLFxufTtcblxuLy8gb25seSBzaW5nbGUgZXhwb3J0IHBlciAuanMgZmlsZSBhbGxvd2VkXG4vLyBleHBvcnRpbmcgdGhpcyBzaW5jZSB3ZSB3aWxsIG5lZWQgaXQgdG8gcmV0cmlldmUgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UgZnJvbSB0aGUgZG9jdW1lbnQvRE9NXG5leHBvcnQgZGVmYXVsdCBydW5uZXJDb25maWc7XG4iLCJpbXBvcnQgY29kZU1pcnJvciBmcm9tIFwiLi9lZGl0b3JcIjtcbmltcG9ydCBydW5uZXJDb25maWcgZnJvbSBcIi4vY29uZmlnLXV0aWxzXCI7XG5pbXBvcnQgXCJjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzc1wiO1xuXG5mdW5jdGlvbiBydW5SZXF1ZXN0KCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXEgPSB7XG4gICAgICBzb3VyY2U6IGNvZGVNaXJyb3IuZ2V0VmFsdWUoKSxcbiAgICAgIGxhbmd1YWdlOiBydW5uZXJDb25maWcuZ2V0U2VsZWN0ZWRMYW5ndWFnZSgpLFxuICAgIH07XG4gICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIGNvbnN0IGZ1bGxVcmwgPSBydW5uZXJDb25maWcudXJsICsgcnVubmVyQ29uZmlnLnJ1bkVuZHBvaW50O1xuICAgIHhoci5vcGVuKFwiUE9TVFwiLCBmdWxsVXJsKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCA0MDApIHtcbiAgICAgICAgcmVzb2x2ZSh4aHIucmVzcG9uc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmVqZWN0KHtcbiAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICB9KTtcbiAgICB9O1xuICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KHJlcSkpO1xuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuQ2FsbCgpIHtcbiAgYXdhaXQgcnVuUmVxdWVzdCgpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgbGV0IG91dCA9IEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3Rkb3V0LWZpZWxkXCIpLmlubmVySFRNTCA9XG4gICAgICAgIFwiU3Rkb3V0OiBcIiArIG91dFtcInN0ZG91dFwiXS5yZXBsYWNlKC9cXG4vZywgXCI8YnI+XCIpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGRlcnItZmllbGRcIikuaW5uZXJIVE1MID1cbiAgICAgICAgXCJTdGRlcnI6IFwiICsgb3V0W1wic3RkZXJyXCJdO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlcnItZmllbGRcIikuaW5uZXJIVE1MID0gXCJFcnJvcjogXCIgKyBvdXRbXCJlcnJvclwiXTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXRwdXQtZmllbGRcIikudGV4dENvbnRlbnQgPSBcIkVycm9yOiBcIiArIGVycjtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcnVuQ2FsbDtcbiJdLCJuYW1lcyI6WyJnZXRTZWxlY3RlZExhbmd1YWdlIiwic2VsZWN0b3IiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwib3B0aW9ucyIsInNlbGVjdGVkSW5kZXgiLCJpbm5lclRleHQiLCJ1cmwiLCJydW5FbmRwb2ludCIsImxhbmdFbmRwb2ludCIsImFzeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXEiLCJzb3VyY2UiLCJsYW5ndWFnZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiZnVsbFVybCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwidGhpcyIsInN0YXR1cyIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXN1bHQiLCJvdXQiLCJwYXJzZSIsImlubmVySFRNTCIsInJlcGxhY2UiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJ0ZXh0Q29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=